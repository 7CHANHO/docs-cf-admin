---
title: Supporting WebSockets
owner: Routing
---

<strong><%= modified_date %></strong>

This topic explains how Cloud Foundry (CF) uses WebSockets, why developers use WebSockets in their applications, and how operators can configure their load balancer to support WebSockets. 

Operators who use a load balancer to distribute incoming traffic across CF [router](../concepts/architecture/index.html#router) instances must configure their load balancer for WebSockets. Otherwise, the [Loggregator](../loggregator/architecture.html) system will not be able to stream application logs to developers, or application event data and system metrics to third-party aggregation services. Additionally, developers will not be able to use WebSockets in their applications. 

##<a id='understand'></a> Understand WebSockets

The WebSocket protocol provides full-duplex communication over a single TCP connection. Applications can use WebSockets to exchange data between a client and a server instantaneously, providing more efficient real-time communication than HTTP. 

CF uses WebSockets for the following metrics and logging purposes: 

1. To stream all application event data and system metrics from the [Doppler](../loggregator/architecture.html#doppler) server instances to the [Traffic Controller](../loggregator/architecture.html#traffic-controller) 

1. To stream application logs from the Traffic Controller to developers using the cf Command Line Interface (CLI) <%= vars.or_apps_man %>.

1. To stream all application event data and system metrics from the Traffic Controller over the [Firehose](../loggregator/architecture.html#firehose) endpoint to external applications or services 

For more information about these Loggregator components, see the [Overview of the Loggregator System](../loggregator/architecture.html) topic.

##<a id='config'></a> Configure Your Load Balancer for WebSockets

To form a WebSocket connection, the client sends an HTTP request that contains an `Upgrade` header and other headers required to complete the WebSocket handshake. The procedures required to handle this request will vary depending on your IaaS and load balancer configuration. The following list includes several possible approaches:

* Some load balancers recognize the `Upgrade` header and automatically pass these requests through to the CF router without returning the WebSocket handshake response. This scenario requires no additional configuration. 
* Some load balancers are capable of passing through HTTP requests containing the `Upgrade` header transparently to the CF router, but require configuration.
* Some load balancers do not support passing through WebSocket handshake requests in HTTP to the CF router. For instance, the Amazon Web Services (AWS) Elastic Load Balancer (ELB) does not support this behavior. In this scenario, you must configure your load balancer to forward TCP traffic to your CF router to support WebSockets. If your load balancer does not support TCP pass-through of WebSocket requests on the same port as other HTTP requests, you can do one of the following:
    * Configure an additional port for WebSocket requests, such as port 4443, and follow the steps below in the [Modify Your Release Manifest](#modify) section
    * Add an additional load balancer with a domain that resolves to it, such as `ws.cf.example.com`, and ensure that all WebSocket traffic goes through this domain (this is especially useful if application clients only support standard ports)

<p class="note"><strong>Note</strong>: Regardless of your IaaS and configuration, you must configure your load balancer to send the X-Forwarded-For and X-Forwarded-Proto headers for requests on port 80 and 443. See the <a href='../adminguide/securing-traffic.html'>Securing Traffic into Cloud Foundry</a> topic for more information.</p>

##<a id='modify'></a> Modify Your Release Manifest

By default, the CF release manifest assigns port 4443 for TCP/WebSocket communications. If you have configured your load balancer to use a port other than 4443 for TCP/WebSocket traffic, you must edit your CF manifest to set the value of `properties.logger_endpoint.port` to the correct port. Locate the following section of your CF manifest and replace `YOUR-WEBSOCKET-PORT` with the appropriate value: 

```
properties:
  logger_endpoint:
    port: YOUR-WEBSOCKET-PORT
```
