---
title: Migrating Apps to Diego
owner: Diego
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
    }
</style>

<strong><%= modified_date %></strong>

## <a id='intro'></a>Introduction

This topic describes how to migrate the apps in your deployment from the older DEA architecture to the newer Diego architecture. 

Both operators and app developers have procedures that they need to carry out to migrate apps to the Diego architecture. 

You might want to migrate your apps:

+ To take advantage of the Diego architecture.

+ PCF: Because migration is a prerequisite to upgrading to Pivotal Cloud Foundry (PCF) v1.7. | CF: To prepare you deployment for the eventual deprecation of the DEA architecture. 

For general information about the Diego and DEA, see the [Differences Between DEA and Diego Architectures](../concepts/diego/dea-vs-diego.html) topic.

## <a id='process'></a>The Stages for the App Migration Process

The following table describes the process and roles required to carry out the migration of app from the DEA to the Diego architecture.
Detailed instructions for each stage of the process are given below. 

<table border='1' class='nice'>
<tr>
  <th>Stage</th><th>Who</th><th>Does What</th><th>Link to Details</th>
</tr>

<tr>
  <td valign="top">1</td>
  <td>Operators</td>
  <td>Plan the migration.</td>
  <td><a href="#prep-tools">link</a></td>
</tr>

<tr>
  <td valign="top">2</td>
  <td>Operators</td>
  <td>Prepare the deployment for Diego</td>
  <td><a href="#scale-diego">link</a></td>
</tr>

<tr>
  <td valign="top">3</td>
  <td>Developers</td>
  <td>Determine if changes need to be made to their environment variables to be compatible with Diego.</td>
  <td><a href="#prep-app">link</a></td>
</tr>

<tr>
  <td valign="top">4</td>
  <td>Developers</td>
  <td>Migrate apps to Diego. The method depends on whether a short downtime is acceptable.</td>
  <td><a href="#link">link</a></td>
</tr>

<tr>
  <td valign="top">5</td>
  <td>Developers</td>
  <td>Verify that their apps have been migrated.</td>
  <td><a href="#verify">link</a></td>
</tr>

<tr>
  <td valign="top">6</td>
  <td>Operators</td>
  <td>Confirm that all apps have been migrated and then scale down the DEA components.</td>
  <td><a href="#link">link</a></td>
</tr>

</table>

## <a id='prep-tools'></a>Operators: Plan the Migration

Operators need to plan the migration of the apps on the <%= vars.product_name %> deployment 
and communicate the plan to the developers in the organization.

1. Review and understand this topic.

2. Create a migration schedule. 

    For an example of migration schedule, see [Migrating Applications from DEAs to Diego](https://discuss.pivotal.io/hc/en-us/articles/230433388-Migrating-Applications-from-DEAs-to-Diego).

3. Communicate the schedule to developers and others in the organization who might be affected by the migration.


## <a id='scale-diego'></a>Operators: Prepare the Deployment for the Migration

In this stage, operators need to enable Diego as the default
so that new apps pushed in the future will use the Diego architecture and not the DEA architecture. 

<% if vars.product_name == 'CF' %>
<%= partial 'migrate_scale_oss' %>
<% else %>
<%= partial 'migrate_diego_scale' %>
<% end %>

<% if vars.product_name == 'CF' %>
<%= partial 'migrate_enable_oss' %>
<% else %>
<% vars.migrate_diego_enable %>
<% end %>

## <a id='prep-app'></a>Developers: Check and Prepare Apps for Deployment

Developers need to check their apps to see if any changes need to be made to environment variables 
that are not used in Diego and to disable port-based health checks for worker apps.

1. If you have any (worker?) apps that are pushed with the `--no-route` option, disable the port-based health check:

    <code>
    $ cf set-health-check APP-NAME none
    </code>

    Where <code>APP_NAME</code> is the name of your app.

    This prevents the work applications from reporting as unhealthy after they are migrated to Diego.

2. If your app uses any of the following environment variables, you need to modify your code.

    <table border='1' class='nice'>

    <tr>
    <th>If your code uses this environment variable&hellip;</th><th>Then&hellip;</th>
    </tr>

    <tr>
    <td><code>VCAP\_APP\_HOST</code></td><td>replace it with <code>0.0.0.0</code></td>
    </tr>
 
    <tr>
    <td><code>VCAP\_APP\_PORT</code></td><td>replace it with <code>PORT</code> which is set to <code>8080</code> by default.</td>
    </tr>

    <tr>
    <td><code>VCAP\_APPLICATION</code> with any of the following keys:
              <ul>
              <li><code>users</code></li>
              <li><code>started\_at\_timestamp</code></li>
              <li><code>state\_timestamp</code></li>
              <li><code>started\_at</code></li>
              <li><code>start</code></li>
              </ul></td>
     <td>rewrite your code to remove these environment variables.</td>
    </tr>

    <tr>
    <td>Something about capitalization of logs</td>
    <td><a href="https://github.com/cloudfoundry/diego-design-notes/blob/master/migrating-to-diego.md#application-log-lines">Application log lines</a></td>
    </tr>

    </table>

    For more information about these environment variables that are different in Diego, see [CF-Specific Environment Variables](CF-Specific Environment Variables).
   
    
## <a id='migrate-app'></a>Developers: Migrate Apps to Diego

Developers migrate their apps from DEAs to the Diego architecture using the Diego-Enabler plugin. 
The plugin enables Diego in your app manifest.  
If your apps can tolerate a brief downtime of (approximately a minute) migrated individually or in batch mode with an overwrite-based migration. 
If a zero-downtime migration is required, then a blue-green deployment must be done to temporarily run your apps in parallel using both the DEA and Diego architectures.

1. (Optional) Find out what apps you have running on DEAs:

    <code>$ cf dea-apps</code>

    For example, 

    <pre class='terminal'>
    $ cf dea-apps
    Getting apps on the DEA runtime as example_user...
    OK
    name        org     space
    dea-app1    org1    space1
    dea-app2    org1    space2
    </pre>

    You can also use the <code>-s</code> flag or the <code>-o</code> to limit the search to 
    a particular space or org, for example, <code>$ cf dea-apps -o MY-ORG</code>

2.  Use the Cloud Foundry Command Line Interface (cf CLI) to install the Diego-Enabler plugin:
    <pre>
    $ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
    $ cf install-plugin Diego-Enabler -r CF-Community
    </pre>

    For more information about installing the Diego-Enabler CLI Plugin, see the [Diego-Enabler repository readme](https://github.com/cloudfoundry-incubator/Diego-Enabler).

3.  To perform an overwrite-based migration for one app:
    <code>$ cf enable-diego APP-NAME</code>

    For example,

    <pre class='terminal'>
    $ cf enable-diego dea-app
    Diego support for EXAMPLE-APP is set to true
    </pre>
  
4. To perform an overwrite-based migration for multiple apps in a batch job:





1. Confirm that the migrated apps run "properly"
    <code>$ cf app APP-NAME</code>
    QUESTION: this check wasn't included in the batch mode. how do we handle this line?
   







## <a id='migrate'></a>Migrate Your Apps

<%= vars.product_short %> provides three approaches to migrating your apps to Diego:

* [Overwrite-based migration](#migration-with-downtime) migrates an app with a few steps and a brief downtime.

* [Batch migration](#batch-migration) performs overwrite-based migration for all apps in an org, space, or deployment with the single CLI command `cf migrate-apps`.

* [Blue-green migration](#blue-green-migration) avoids downtime by employing [Blue-Green deployment](../devguide/deploy-apps/blue-green.html).

### <a id='migration-with-downtime'></a>Overwrite-Based Migration###

This procedure overwrites existing app instances with new ones on the Diego architecture, resulting in a brief (~1 minute) downtime. This approach requires fewer steps than the zero downtime blue-green deployment procedure described below.

<p class="note"><strong>Note</strong>: Use overwrite-based migration if a short downtime is acceptable.</p>


1. Run `cf enable-diego APP-NAME` to enable Diego in your app manifest.
<pre class='terminal'>
$ cf enable-diego EXAMPLE-APP
Diego support for EXAMPLE-APP is set to true
</pre>

1. Confirm that `APP-NAME` runs properly.
<pre class="terminal">
$ cf app EXAMPLE-APP
</pre>

###<a id="batch-migration"></a>Batch Migration

This procedure migrates multiple apps in a single command using overwrite-based migration. The `cf migrate-apps` command migrates all apps in a deployment unless you specify an org or space. 

- Run `cf migrate-apps diego` to migrate apps to Diego. You can specify the following options:
	- `-o ORG` migrates all apps in an org.
	- `-s SPACE` migrates all apps in a space that exists in your currently targeted org. If you want to migrate apps in a space from another org, you must target that org before running `cf migrate-apps`.
	- `-p MAX_IN_FLIGHT` specifies how many apps to migrate in parallel, up to 100. Defaults to 1. We recommend first trying a migration with the default and then increasing `-p` if the first migration is stable. Do not set `-p` to a value greater than the number of Diego cells in the deployment. 

<p class="note"><strong>Note</strong>: Migrating a running app causes a restart. Migrating a stopped app does not cause a restart.</p>

The following example migrates all DEA apps in a deployment to Diego. The apps migrate in the sequence specified by running `cf dea-apps`.

<pre class="terminal">
$ cf migrate-apps diego

Migrating apps to Diego as example_user....

Started migrating app my-app to Diego as example_user...

Completed migrating app my-app to Diego in space with guid a045rw51-o358-4e26-9dfc-4c7365cf987 as example_user

...

Migration to Diego completed: 23 apps, 0 warnings
</pre>

The following example migrates all DEA apps in `space2` to Diego, ten at a time.

<pre class="terminal">
$ cf migrate-apps -s space2 -p 10 diego
</pre>

### <a id='blue-green-migration'></a>Blue-Green Migration ###

The blue-green deployment method migrates your apps with zero downtime. This method temporarily runs your apps in parallel using both the DEA and Diego architectures.

<p class="note"><strong>Note</strong>: If necessary, complete the <a href="#application-rollback">Application Rollback procedure</a> below to revert the migration with zero downtime.</p>
#### <a id="blue-green-procedure"></a>Migrate an App from DEA to Diego Architecture

1. Use the Cloud Foundry Command Line Interface (cf CLI) to install the Diego-Enabler plugin.
<pre class='terminal'>
$ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
$ cf install-plugin Diego-Enabler -r CF-Community
</pre>

1. Push your application with a new name and a test route for your application. This app will run on the Diego architecture. Do not use the name or route of the existing application.
<pre class="terminal">$ cf push NEW-APP -d MY-DOMAIN.COM -n TEMP-SUBDOMAIN</pre>
<p class="note"><strong>Note</strong>:
The currently deployed application, OLD-APP, and the application you are pushing, NEW-APP, must be the same version. Otherwise, any static assets served from your application, like CSS and Javascript, will not be consistent across both apps. Now is not the time to upgrade your app.
</p>

1. Confirm that `NEW-APP` runs properly.
<pre class="terminal">
$ cf app NEW-APP
</pre>

1. Run `has-diego-enabled` to confirm that the application is running on the Diego architecture.
<pre class="terminal">
$ cf has-diego-enabled NEW-APP
</pre>

1. If the `has-diego-enabled` command returns false, then set the `diego` boolean to true:
<pre class="terminal">
$ cf enable-diego NEW-APP
</pre>

1. Map the route for your application running on the DEA architecture to `NEW-APP`. This remapping creates a second route that splits your traffic between the DEA and Diego architectures.
<pre class="terminal">$ cf map-route NEW-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

1. Unmap the route from the application running on the DEA architecture. This action sends all of the traffic to the application that is running on Diego.
<pre class="terminal">$ cf unmap-route OLD-APP MY-DOMAIN.COM -n MY-SUBDOMAIN
</pre>

1. After confirming that the new application is running correctly on Diego, stop `OLD-APP` to route all traffic to `NEW-APP` and complete the blue-green migration.
<pre class="terminal">$ cf stop OLD-APP</pre>
<p class="note"><strong>Note</strong>:
Verify that your application is still accessible and runs properly. If there is a problem with your app, do not complete this procedure. Instead, proceed to the Application Rollback procedure below.
</p>

1. Delete the old application.
<pre class="terminal">$ cf delete OLD-APP</pre>

1. Optional: Delete the route to the TEMP-SUBDOMAIN that you specified when pushing the Diego app for testing. See [Delete a Route](../devguide/deploy-apps/routes-domains.html#delete-route).


#### Application Rollback Procedure <a id='application-rollback'></a>
QUESTION: Dieu said to delete this. Just want to doublecheck with Eric first.

If necessary, complete this procedure to revert your application to the DEA architecture with zero downtime.

<p class="note"><strong>Note</strong>:
This procedure only works if you have not deleted your application that runs on the DEA architecture.
</p>

1. Start your app using the pre-migration name.
<pre class="terminal">$ cf start OLD-APP</pre>

1. Map `OLD-APP` to your domain.
<pre class="terminal">$ cf map-route OLD-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

1. Unmap the app running on the Diego architecture from your domain.
<pre  class="terminal">$ cf unmap-route NEW-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

##<a id="verify"></a>Developers: Verify Migration

To verify a successful migration of your apps from DEA to Diego, perform the following steps:

1. Run `cf dea-apps` to list any apps running on DEAs. Verify that the list returned by the command is empty.

    <pre class="terminal">
    $ cf dea-apps -o MY-ORG

    Getting apps on the DEA runtime as example_user...
    OK

    name        org     space

    </pre>

1. Run `cf diego-apps` to list any apps running on Diego. Verify that all of your apps are running on Diego.

    <pre class="terminal">
    $ cf diego-apps -o MY-ORG

    Getting apps on the DEA runtime as example_user...
    OK

    name        org     space
    diego-app1  MY-ORG  MY-SPACE
    diego-app2  MY-ORG  MY-SPACE
    </pre>

##<a id='redeploy'></a> Final Redeploy

<% if vars.product_name == 'CF' %>
<%= partial 'migrate_final_redeploy_oss' %>
<% else %>
<%= vars.migrate_final_redeploy %>
<% end %>

##<a id="troubleshoot"></a>Troubleshoot Migration

<table>
  <tr>
    <th>Symptom</th>
    <th>Explanation</th>
    <th>Solution</th>
  </tr>
  <tr>
    <td>Error: `Runner error: desired app failed: 503`</td>
    <td>Diego places a 4KB limit on the maximum size of application routes, space for 40 to 50 medium-sized 50-character routes. This error indicates you have exceeded the limit.</td>
    <td>In some cases, you can work around this by using a wildcard route, for example, `*.my-domain.com` instead of mapping individual routes.  If you see this error and you cannot wildcard the routes, create another instance of the same application and bind the remaining routes to the second application instance.</td>
  </tr>
  <tr>
    <td>Large applications may fail to stage, typically resulting in the following error: `Copying into the container failed`.</td>
    <td>Large applications may fail to stage because of a [known issue](https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/migrating-to-diego.md#disk-quota-over-enforcement-during-container-setup) where disk usage is over-reported.</td>
    <td>By default, apps have a 1GB disk quota. If your application files are close to this size, use the `-k` option of `cf push` to increase your disk quota.</td>
  </tr>
  <tr>
    <td>Running the `cf files` command results in the error: `Request failed for app: APP_NAME, instance: INST_NUM and path: PATH`</td>
    <td>Diego does not support the `cf files` command.</td>
    <td>Run the `cf ssh APP_NAME` command to list files in your application instances.</td>
  </tr>
  <tr>
    <td>Errors related to environment variables</td>
    <td>Diego does not support the interpolation of environment variables. In the DEA architecture, when you set environment variables with the `cf set-env` or in your manifest file, you could include one environment variable in the definition of another variable, such as `SOMEPATH=$HOME/SOME/PATH`.</td>
    <td>Remove interpolation from any environment variables.</td>
</table>
