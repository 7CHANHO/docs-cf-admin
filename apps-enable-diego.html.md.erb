---
title: Migrating Apps to Diego
owner: Diego
---

<style>
    .note.warning {
        background-color: #fdd;
        border-color: #fbb
    }

    .note.warning:before {
        color: #f99;
    }
</style>

<strong><%= modified_date %></strong>

This topic describes how to migrate the apps in your deployment from the older DEA architecture to the newer Diego architecture.
Both operators and app developers have procedures that they need to carry out to migrate apps to the Diego architecture.

For information about the differences between Diego and DEA, see the [Differences Between DEA and Diego Architectures](../concepts/diego/dea-vs-diego.html) topic.

<%= vars.migrate_diego_intro %>

## <a id='process'></a>The Stages for the App Migration Process

The following table describes the process and roles required to carry out the migration of apps from the DEA to the Diego architecture.
Detailed instructions for each stage of the process are given below. 

<table border='1' class='nice'>
<tr>
  <th>Stage</th><th>Who</th><th>Does What</th><th>Link to Details</th>
</tr>

<tr>
  <td valign="top" align="center">1</td>
  <td>Operators</td>
  <td>Plan the migration schedule.</td>
  <td><a href="#prep-tools">link</a></td>
</tr>

<tr>
  <td valign="top" align="center">2</td>
  <td>Operators</td>
  <td>Prepare the deployment for Diego.</td>
  <td><a href="#scale-diego">link</a></td>
</tr>

<tr>
  <td valign="top" align="center">3</td>
  <td>Developers</td>
  <td>Determine if changes need to be made to their environment variables to be compatible with Diego.</td>
  <td><a href="#prep-app">link</a></td>
</tr>

<tr>
  <td valign="top" align="center">4</td>
  <td>Developers</td>
  <td>Migrate apps to Diego. The method depends on whether downtime for the app is tolerable.</td>
  <td><a href="#migrate-app">link</a></td>
</tr>

<tr>
  <td valign="top" align="center">5</td>
  <td>Developers</td>
  <td>Verify that their apps have been migrated.</td>
  <td><a href="#verify">link</a></td>
</tr>

<tr>
  <td valign="top" align="center">6</td>
  <td>Operators</td>
  <td>Confirm that all apps have been migrated and then scale down the DEA components.</td>
  <td><a href="#redeploy">link</a></td>
</tr>

</table>

## <a id='prep-tools'></a>Operators: Plan the Migration Schedule

Operators need to plan the migration of the apps on the <%= vars.product_name %> deployment 
and communicate the plan to the developers in the organization.

1. Review and understand this topic.

2. Create a migration schedule. 

    For an example of migration schedule, see [Migrating Applications from DEAs to Diego](https://discuss.pivotal.io/hc/en-us/articles/230433388-Migrating-Applications-from-DEAs-to-Diego).

3. Communicate the schedule to developers and others in the organization who might be affected by the migration.

## <a id='scale-diego'></a>Operators: Prepare the Deployment for the Migration

In this stage, operators need to enable Diego as the default
so that new apps pushed in the future will use the Diego architecture and not the DEA architecture.
They also need to add Diego cells to accommodate the migrated apps.   


<% if vars.product_name == 'CF' %>
<%= partial 'migrate_scale_oss' %>
<% else %>
<%= partial '../opsguide/migrate_diego_scale' %>
<% end %>

<% if vars.product_name == 'CF' %>
<%= partial 'migrate_enable_oss' %>
<% else %>
<% vars.migrate_diego_enable %>
<% end %>

## <a id='prep-app'></a>Developers: Check and Prepare Apps for Deployment

Developers need to check their apps to see if any changes need to be made to environment variables 
that are not used in Diego and to disable port-based health checks for worker apps.

1. If you have any apps that do not serve web traffic (typically, apps that are pushed with the `--no-route` option), disable the port-based health check:

    <code>
    $ cf set-health-check APP-NAME none
    </code>

    Where <code>APP_NAME</code> is the name of your app.

    This prevents the work applications from reporting as unhealthy after they are migrated to Diego.

2. If your app uses any of the following environment variables, you need to modify your code.

    <table border='1' class='nice'>

    <tr>
    <th>If your code uses this environment variable&hellip;</th><th>Then&hellip;</th>
    </tr>

    <tr>
    <td><code>VCAP_APP_HOST</code></td><td>replace it with <code>0.0.0.0</code></td>
    </tr>
 
    <tr>
    <td><code>VCAP_APP_PORT</code></td><td>replace it with <code>PORT</code></td>
    </tr>

    <tr>
    <td><code>VCAP_APPLICATION</code> with any of the following keys:
              <ul>
              <li><code>users</code></li>
              <li><code>started_at_timestamp</code></li>
              <li><code>state_timestamp</code></li>
              <li><code>started_at</code></li>
              <li><code>start</code></li>
              </ul></td>
     <td>rewrite your code to remove these environment variables.</td>
    </tr>

    </table>

    For more information about these environment variables that are different in Diego, 
    see [CF-Specific Environment Variables](https://github.com/cloudfoundry/diego-design-notes/blob/master/migrating-to-diego.md#cf-specific-environment-variables).
   
    
## <a id='migrate-app'></a>Developers: Migrate Apps to Diego

Developers migrate their apps from DEAs to the Diego architecture using the Diego-Enabler plugin. 
The plugin enables Diego in your app manifest.  

If your apps can tolerate a brief downtime of (approximately a minute) migrated individually or in batch mode with an overwrite-based migration.
Batch mode can perform an overwrite-based migration for all apps in an particular org, space, or deployment.
If a zero-downtime migration is required, then a blue-green deployment must be done to temporarily 
run your apps in parallel using both the DEA and Diego architectures.

2.  Use the Cloud Foundry Command Line Interface (cf CLI) to install the Diego-Enabler plugin:
    <pre>
    $ cf add-plugin-repo CF-Community <span>http:</span>//plugins.cloudfoundry.org/
    $ cf install-plugin Diego-Enabler -r CF-Community
    </pre>

    For more information about installing the Diego-Enabler CLI Plugin, 
    see the [Diego-Enabler repository readme](https://github.com/cloudfoundry-incubator/Diego-Enabler).

1. (Optional) Find out what apps you have running on DEAs:

    <code>$ cf dea-apps</code>

    For example, 

    <pre class='terminal'>
    $ cf dea-apps
    Getting apps on the DEA runtime as example_user...
    OK
    name        org     space
    dea-app1    org1    space1
    dea-app2    org1    space2
    </pre>

    You can also use the <code>-s</code> flag or the <code>-o</code> to limit the search to 
    a particular space or org, for example, <code>$ cf dea-apps -o MY-ORG</code>

3.  To perform an overwrite-based migration for one app:
    <code>$ cf enable-diego APP-NAME</code>

    <p class="note"><strong>IMPORTANT</strong>: This step might cause downtime.</p>

    For example,

    <pre class='terminal'>
    $ cf enable-diego dea-app
    Diego support for EXAMPLE-APP is set to true
    </pre>
  
4. To perform an overwrite-based migration for multiple apps in a batch job:

    <code>$ cf migrate-apps diego [-o ORG] [-s SPACE] [-p MAX\_IN\_FLIGHT]</code>

    <p class="note"><strong>IMPORTANT</strong>: This step might cause downtime.</p>
 
    Where the options are as follows:
    - `-o ORG` migrates all apps in an org.
    - `-s SPACE` migrates all apps in a space that exists in your currently targeted org. 
          To migrate apps in a space from different org, target that org before running `cf migrate-apps`.
    - `-p MAX_IN_FLIGHT` specifies how many apps to migrate in parallel, up to 100. The default is 1. 
          Pivotal recommends first trying a migration with the default and then increasing `-p` if the first migration is stable. 
          Do not set `-p` to a value greater than the number of Diego cells in the deployment. 
    
    For examples of batch migrate commands, see <a href=#batch-examples>Batch Migration Examples</a>.

5. To perform a migration without downtime, follow the steps in <a href="#blue-green-migration">Blue-Green Migration</a> below.

For troubleshooting information, see [Troubleshoot Migration](#troubleshoot) below.

###<a name='batch-examples'></a>Batch Migration Examples

<strong>Example 1</strong> — The following example migrates all DEA apps in a deployment to Diego. 
The apps migrate in the sequence specified by running `cf dea-apps`.

<pre class="terminal">
$ cf migrate-apps diego

Migrating apps to Diego as example_user....

Started migrating app my-app to Diego as example_user...

Completed migrating app my-app to Diego in space with guid a045rw51-o358-4e26-9dfc-4c7365cf987 as example_user

...

Migration to Diego completed: 23 apps, 0 warnings
</pre>

<strong>Example 2</strong> — The following example migrates all DEA apps in `space2` to Diego, ten at a time.

<pre class="terminal">
$ cf migrate-apps -s space2 -p 10 diego
</pre>

### <a name='blue-green-migration'></a>Blue-Green Migration ###

The blue-green deployment method migrates your apps with zero downtime. 
This method temporarily runs your apps in parallel using both the DEA and Diego architectures.

1. Push your application with a new name and a test route for your application. 
   This app will run on the Diego architecture. Do not use the name or route of the existing application.
<pre class="terminal">$ cf push NEW-APP -d MY-DOMAIN.COM -n TEMP-SUBDOMAIN</pre>
<p class="note"><strong>Note</strong>:
The currently deployed application, OLD-APP, and the application you are pushing, NEW-APP, must be the same version. 
Otherwise, any static assets served from your application, like CSS and Javascript, will not be consistent across both apps. 
Now is not the time to upgrade your app.
</p>

1. Confirm that `NEW-APP` runs properly.
<pre class="terminal">
$ cf app NEW-APP
</pre>

1. Run `has-diego-enabled` to confirm that the application is running on the Diego architecture.
<pre class="terminal">
$ cf has-diego-enabled NEW-APP
</pre>

1. If the `has-diego-enabled` command returns false, then set the `diego` boolean to true:
<pre class="terminal">
$ cf enable-diego NEW-APP
</pre>

1. Map the route for your application running on the DEA architecture to `NEW-APP`. This remapping creates a second route that splits your traffic between the DEA and Diego architectures.
<pre class="terminal">$ cf map-route NEW-APP MY-DOMAIN.COM -n MY-SUBDOMAIN</pre>

1. Unmap the route from the application running on the DEA architecture. This action sends all of the traffic to the application that is running on Diego.
<pre class="terminal">$ cf unmap-route OLD-APP MY-DOMAIN.COM -n MY-SUBDOMAIN
</pre>

1. After confirming that the new application is running correctly on Diego, stop `OLD-APP` to route all traffic to `NEW-APP` 
   and complete the blue-green migration.

    <pre class="terminal">$ cf stop OLD-APP</pre>

1. Delete the old application.
<pre class="terminal">$ cf delete OLD-APP</pre>

1. (Optional) Delete the route to the TEMP-SUBDOMAIN that you specified when pushing the Diego app for testing. See [Delete a Route](../devguide/deploy-apps/routes-domains.html#delete-route).


##<a id="verify"></a>Developers: Verify Migration

To verify a successful migration of your apps from DEA to Diego, perform the following steps:

1. Run `cf dea-apps` to list any apps running on DEAs. Verify that the list returned by the command is empty.

    <pre class="terminal">
    $ cf dea-apps -o MY-ORG

    Getting apps on the DEA runtime as example_user...
    OK

    name        org     space

    </pre>

1. Run `cf diego-apps` to list any apps running on Diego. Verify that all of your apps are running on Diego.

    <pre class="terminal">
    $ cf diego-apps -o MY-ORG

    Getting apps on the DEA runtime as example_user...
    OK

    name        org     space
    diego-app1  MY-ORG  MY-SPACE
    diego-app2  MY-ORG  MY-SPACE
    </pre>

3. Perform tests and checks to confirm that your apps are running as expected. 

    For example: 
      + Run smoke tests.
      + Validate any systems you have to monitor your apps.
      + Tail logs, especially for worker or scheduler apps. For more information, see 
       <a href="https://docs.pivotal.io/pivotalcf/1-6/devguide/deploy-apps/streaming-logs.html#tail-log">Tailing Logs</a>.

##<a id='redeploy'></a>Operators: Verify Migration and Scale Down VMs

<% if vars.product_name == 'CF' %>
<%= partial 'migrate_final_redeploy_oss' %>
<% else %>
<%= partial '../opsguide/migrate_final_redeploy_pcf' %>
<% end %>

##<a id="troubleshoot"></a>Troubleshoot Migration

The following table lists possible errors and their resolutions that may occur when migrating applications from DEA to Diego:

<table>
  <tr>
    <th width="40%">Symptom</th>
    <th width="30%">Explanation</th>
    <th width="30%">Solution</th>
  </tr>

  <tr>
    <td valign="top">Errors related to environment variables</td>
    <td>Diego does not support the interpolation of environment variables. 
        In the DEA architecture, when you set environment variables with the <code>cf set-env</code> or in your manifest file, 
        you could include one environment variable in the definition of another variable, 
        such as <code>SOMEPATH=$HOME/SOME/PATH</code></td>
    <td valign="top">Remove interpolation from any environment variables.</td>
  </tr>

  <tr>
    <td valign="top">Large applications may fail to stage, typically resulting in the following error: 
        <code>Copying into the container failed</code></td>
    <td valign="top">Large applications may fail to stage because of a 
        <a href="https://github.com/cloudfoundry-incubator/diego-design-notes/blob/master/migrating-to-diego.md#disk-quota-over-enforcement-during-container-setup">
        known issue</a> where disk usage is over-reported.</td>
    <td valign="top">By default, apps have a 1GB disk quota. 
        If your application files are close to this size, use the <code>cf push -k</code> command to increase your disk quota.</td>
  </tr>

  <tr>
    <td valign="top">Running the <code>cf files</code> command results in the error: 
        <code>Request failed for app: APP_NAME, instance: INST_NUM and path: PATH</code></td>
    <td valign="top">Diego does not support the <code>cf files</code> command.</td>
    <td valign="top">Run the <code>cf ssh APP_NAME</code> command to list files in your application instances.</td>
  </tr>

 <tr>
    <td valign="top">Error: <code>Runner error: desire app failed: 503</code></td>
    <td valign="top">Diego places a 4KB limit on the maximum size of application routes, 
        space for 40 to 50 medium-sized 50-character routes.
    <p>This error indicates you have exceeded the limit.</p>
    </td>
    <td valign="top">In some cases, you can work around this by using a wildcard route, 
       for example <code>*.my-domain.com</code> instead of mapping individual routes.

    <p>If you see this error and you cannot wildcard the routes, create another instance of the same application 
       and bind the remaining routes to the second application instance.</p></td>
  </tr>

</table>
