---
title: Administering Container Networking
owner: Diego Networking
---

This topic provides an overview of container networking in Cloud Foundry (CF) and describes how to enable and use the feature. 

##<a id="about"></a>About Container Networking

The Diego cells, which host apps in CF, run each app instance in a container. 
When the container-networking feature is enabled, apps can communicate with each other directly.
When the container-networking feature is disabled, all app-to-app traffic must go through the Gorouter. 

###<a id="overview"></a> Overview

Enabling container networking for your deployment allows you to create policies for communication between containers. 
The container-networking feature also provides a unique IP address to each container that is accessible outside of the 
Diego cell on which the container runs, allowing you to know which container traffic comes from. 

The policies you create specify a source app, destination app, protocol, and port so that apps can communicate directly 
without going through the Gorouter, a load balancer, or a firewall. 
Container networking in CF supports UDP and TCP, and you can configure policies for multiple ports. 
These policies apply immediately without having to restart the app. For more information, see <a href="#create-policies">Create Policies for Container Networking</a> below.

The BOSH release that contains the container networking feature is composed of a 
pluggable network stack, which means you can swap several components. 
For more information, see [Architecture](#architecture) below. 


#### Without Container Networking

The diagram below illustrates how two apps communicate in a deployment without container networking enabled. 
Traffic from **App A** must route out and back in through the Gorouter, 
which restricts performance and the protocol used to send the traffic. 
In this scenario, **App B** does not know the real source of the traffic it receives and must trust all inbound traffic. 

![Pre Container Networking](./images/pre-c2c.png)

#### With Container Networking

The diagram below illustrates how apps communicate in a deployment with container networking enabled. 
In this example, the operator creates two policies to regulate the flow of traffic between **App A**, **App B**, and **App C**. 

* Allow traffic from **App A** to **App B**
* Allow traffic from **App A** to **App C**

If traffic and its direction is not explicitly allowed, it is denied. For example, **App B** cannot send traffic to **App C**.

![Post Container Networking](./images/post-c2c.png)

###<a id="c2cvsasg"></a> Container Networking versus ASGs

Both application security groups (ASGs) and container networking policies affect traffic from app containers.
The following table highlights differences between ASGs and container networking policies.

<table>
  <tr>
   <th></th>
   <th>ASGs</th>
   <th>Container Policies</th>
  <tr>
  <tr>
   <th>Policy granularity</th>
   <td>From a space to an IP address range</td>
   <td>From a source app to a destination app</td>
  </tr>
  <tr>
   <th>Scope</th>
   <td>For a space, org, or deployment</td>
   <td>For app to app only</td>
  </tr>
  <tr>
   <th>Traffic direction</th>
   <td>Outbound control</td>
   <td>Policies apply for incoming packets from other containers</td>
  </tr>
  <tr>
   <th>Source app</th>
   <td>Is not known</td>
   <td>Is identified because of direct addressability</td>
  </tr>
  <tr>
   <th>Policies take affect</th>
   <td>After app restart</td>
   <td>Immediately</td>
  </tr>
</table>
    
###<a id="architecture"></a> Architecture

Container networking in CF integrates with Garden-runC in a Diego deployment. 
The BOSH release for container networking includes several core components, as well as swappable components. 

To understand the components and how they work, see the diagram and tables below. 
The diagram displays the container networking components in blue and other CF components in gray. 
The diagram also highlights swappable components in yellow. 

![c2c architecture diagram](./images/c2c-arch.png)

#### Core Components

The core components included in the container-networking BOSH release are as follows:

<table>
  <tr>
    <th>Part</th>
    <th>Function</th>
  </tr>
  <tr>
    <td>Cloud Foundry Command Line Interface (cf CLI) plugin</td>
    <td>A plugin that you download to control network access policies between apps. 
        See <a href="#create-policies">Create Policies for Container Networking</a>.</td>
  </tr>
  <tr>
    <td>Policy Server</td>
    <td>A central management node that does the following:
      <ul>
        <li>Maintains a database of policies for traffic between apps. 
            The cf CLI plugin calls an API to create or update a record 
            in the policy database whenever you create or remove a policy.</li>
        <li>Exposes a JSON REST API used by the cf CLI plugin</li>
      </ul></td>
  </tr>
  <tr>
    <td>Garden External Networker</td>
    <td> 
      A Garden-runC add-on deployed to every Diego cell that does the following:
      <ul>
        <li>Invokes the CNI plugin component to set up the network for each app</li>
        <li>Forwards ports to support incoming connections from the Gorouter, TCP Router, and Diego SSH Proxy. 
            This keeps apps externally reachable.</li>
        <li>Installs outbound whitelist rules to support CF Application Security Groups (ASGs). 
            See the <a href="app-sec-groups.html">ASG documentation</a>.</li>
      </ul>
    </td>
  </tr>
</table>

#### Swappable Components

The swappable components included in the container-networking BOSH release are as follows:

<table>
  <tr>
    <th>Part</th>
    <th>Function</th>
  </tr>
  <tr>
  <td>Flannel CNI plugin<br>
      (You can also use an alternative such as Calico.)</td>
  <td>A plugin that provides IP address management and network connectivity to apps.
  <ul>
  <li>Acquires IP address of container and relays to Garden</li>
  <li>Installs network interface in container using the the flannel VXLAN backend. This is a shared, flat L3 network.</li>
  </td>
  </ul>
  </tr>
  <tr>
  <td>VXLAN Policy Agent<br>
      (You can also use an alternative such as iovisor, OVS, or iptables.)</td>
  <td>Enforces network policy for traffic between apps as follows:
  <ul>
  <li>Discovers desired network policies from the Policy Server Internal API</li>
  <li>Updates iptables rules on Diego cell to allow whitelisted inbound traffic </li>
  <li>Tags outbound traffic with the unique identifier of the source app using the VXLAN Group-Based Policy (GBP) header</li>
  </ul>
  </td>
  </tr>
</table> 

##<a id="enable"></a>Enable Container Networking

<% if vars.product_name == 'PCF' %>
 <%= partial "../customizing/c2c_pcf_enable" %>
 <% else %>
 <%= partial 'c2c_oss_enable' %>
 <% end %>

##<a id="create-policies"></a>Create Policies for Container Networking

This section describes how to create and modify container-networking policies using a plugin for the cf CLI.

To use the plugin, you must have the `network.admin` UAA scope. This scope gives you the right to create a policy between any two apps in your CF deployment. 
Depending on the security structure of your organization, you can either assign this scope to developers 
so that they can create their own policies or you can have your developers send you requests.  For more information, see [Creating and Managing Users with the UAA CLI (UAAC)](./uaa-user-management.html)

### Install the Plugin

Follow these steps to download and install the Network Policy plugin for the cf CLI:

1. Download the `network-policy-plugin` for your operating system from the 
   [Container Networking Release repository](https://github.com/cloudfoundry-incubator/netman-release/releases).

1. To change the permissions of the plugin file and complete the installation, enter the following commands:

    <pre>
    $ chmod +x ~/Downloads/network-policy-plugin
    $ cf install-plugin ~/Downloads/network-policy-plugin
    </pre>

### Create a Policy

To create a policy that allows direct network traffic from one app to another, enter the following command:

<pre>
$ cf allow-access SOURCE-APP DESTINATION-APP --protocol PROTOCOL --port PORT
</pre>

Where:<br>
`SOURCE-APP` is the name of the app that will be sending traffic.<br>
`DESTINATION-APP` is the name of the app that will be receiving traffic.<br>
`PROTOCOL` is one of the following: `tcp` or `udp`.<br>
`PORT` is the port at which to connect to the destination app. The allowed range is 1 to 65535.<br>


For example, 

<pre class="terminal">
$ cf allow-access frontend backend --protocol tcp --port 8080
Allowing traffic from frontend to backend as admin...
OK 
</pre>

### List Policies

You can list all the policies in your deployment or just the policies for which a single app is 
either the source or the destination:

+ To list the all the policies in your deployment, enter the following command:

    <pre>
    $ cf list-access
    </pre>
+ To list the policies for an app, enter the following command:

    <pre>
    $ cf list-access --app MY-APP
    </pre>

    For example,
    
    <pre class="terminal">
    $ cf list-access --app frontend
    Listing policies as admin...
    OK
    
    Source    Destination    Protocol    Port
    frontend  backend        tcp         8080
    </pre>

### Delete a Policy

To delete a policy that allows direct network traffic from one app to another, enter the following command:

<pre>
$ cf remove-access SOURCE-APP DESTINATION-APP --protocol PROTOCOL --port PORT
</pre>

For example,
<pre class="terminal">
$ cf remove-access frontend backend --protocol tcp --port 8080
Denying traffic from frontend to backend as admin...
OK 
</pre>


